// Copyright 2018-2024 the oak authors. All rights reserved. MIT license.
import { createPromiseWithResolvers } from "./utils/create_promise_with_resolvers.ts";
// deno-lint-ignore no-explicit-any
export const DomResponse = globalThis.Response ?? class MockResponse {
};
const maybeUpgradeWebSocket = "Deno" in globalThis && "upgradeWebSocket" in globalThis.Deno ? Deno.upgradeWebSocket.bind(Deno) : undefined;
export function isNativeRequest(r) {
  return r instanceof NativeRequest;
}
/** An internal oak abstraction for handling a Deno native request. Most users
 * of oak do not need to worry about this abstraction. */ export class NativeRequest {
  #remoteAddr;
  // deno-lint-ignore no-explicit-any
  #reject;
  #request;
  #resolve;
  #resolved = false;
  #response;
  #upgradeWebSocket;
  constructor(request, info){
    this.#remoteAddr = info.remoteAddr;
    // this allows for the value to be explicitly undefined in the options
    this.#upgradeWebSocket = "upgradeWebSocket" in info ? info.upgradeWebSocket : maybeUpgradeWebSocket;
    this.#request = request;
    const { resolve, reject, promise } = createPromiseWithResolvers();
    this.#resolve = resolve;
    this.#reject = reject;
    this.#response = promise;
  }
  get body() {
    // when shimming with undici under Node.js, this is a
    // `ControlledAsyncIterable`
    // deno-lint-ignore no-explicit-any
    return this.#request.body;
  }
  get headers() {
    return this.#request.headers;
  }
  get method() {
    return this.#request.method;
  }
  get remoteAddr() {
    return this.#remoteAddr?.hostname;
  }
  get request() {
    return this.#request;
  }
  get response() {
    return this.#response;
  }
  get url() {
    try {
      const url = new URL(this.#request.url);
      return this.#request.url.replace(url.origin, "");
    } catch  {
    // we don't care about errors, we just want to fall back
    }
    return this.#request.url;
  }
  get rawUrl() {
    return this.#request.url;
  }
  // deno-lint-ignore no-explicit-any
  error(reason) {
    if (this.#resolved) {
      throw new Error("Request already responded to.");
    }
    this.#reject(reason);
    this.#resolved = true;
  }
  getBody() {
    return this.#request.body;
  }
  respond(response) {
    if (this.#resolved) {
      throw new Error("Request already responded to.");
    }
    this.#resolved = true;
    this.#resolve(response);
  }
  upgrade(options) {
    if (this.#resolved) {
      throw new Error("Request already responded to.");
    }
    if (!this.#upgradeWebSocket) {
      throw new TypeError("Upgrading web sockets not supported.");
    }
    const { response, socket } = this.#upgradeWebSocket(this.#request, options);
    this.#resolve(response);
    this.#resolved = true;
    return socket;
  }
}
//# sourceMappingURL=data:application/json;base64,