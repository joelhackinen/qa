// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
// deno-lint-ignore no-explicit-any
export const DomResponse = globalThis.Response ?? class MockResponse {
};
const maybeUpgradeWebSocket = "upgradeWebSocket" in Deno ? Deno.upgradeWebSocket.bind(Deno) : undefined;
export function isNativeRequest(r) {
  return r instanceof NativeRequest;
}
/** An internal oak abstraction for handling a Deno native request. Most users
 * of oak do not need to worry about this abstraction. */ export class NativeRequest {
  #conn;
  // deno-lint-ignore no-explicit-any
  #reject;
  #request;
  #requestPromise;
  #resolve;
  #resolved = false;
  #upgradeWebSocket;
  constructor(requestEvent, options = {}){
    const { conn } = options;
    this.#conn = conn;
    // this allows for the value to be explicitly undefined in the options
    this.#upgradeWebSocket = "upgradeWebSocket" in options ? options["upgradeWebSocket"] : maybeUpgradeWebSocket;
    this.#request = requestEvent.request;
    const p = new Promise((resolve, reject)=>{
      this.#resolve = resolve;
      this.#reject = reject;
    });
    this.#requestPromise = requestEvent.respondWith(p);
  }
  get body() {
    // when shimming with undici under Node.js, this is a
    // `ControlledAsyncIterable`
    // deno-lint-ignore no-explicit-any
    return this.#request.body;
  }
  get donePromise() {
    return this.#requestPromise;
  }
  get headers() {
    return this.#request.headers;
  }
  get method() {
    return this.#request.method;
  }
  get remoteAddr() {
    return this.#conn?.remoteAddr?.hostname;
  }
  get request() {
    return this.#request;
  }
  get url() {
    try {
      const url = new URL(this.#request.url);
      return this.#request.url.replace(url.origin, "");
    } catch  {
    // we don't care about errors, we just want to fall back
    }
    return this.#request.url;
  }
  get rawUrl() {
    return this.#request.url;
  }
  // deno-lint-ignore no-explicit-any
  error(reason) {
    if (this.#resolved) {
      throw new Error("Request already responded to.");
    }
    this.#reject(reason);
    this.#resolved = true;
  }
  getBody() {
    return {
      // when emitting to Node.js, the body is not compatible, and thought it
      // doesn't run at runtime, it still gets type checked.
      // deno-lint-ignore no-explicit-any
      body: this.#request.body,
      readBody: async ()=>{
        const ab = await this.#request.arrayBuffer();
        return new Uint8Array(ab);
      }
    };
  }
  respond(response) {
    if (this.#resolved) {
      throw new Error("Request already responded to.");
    }
    this.#resolve(response);
    this.#resolved = true;
    return this.#requestPromise;
  }
  upgrade(options) {
    if (this.#resolved) {
      throw new Error("Request already responded to.");
    }
    if (!this.#upgradeWebSocket) {
      throw new TypeError("Upgrading web sockets not supported.");
    }
    const { response, socket } = this.#upgradeWebSocket(this.#request, options);
    this.#resolve(response);
    this.#resolved = true;
    return socket;
  }
}
//# sourceMappingURL=data:application/json;base64,